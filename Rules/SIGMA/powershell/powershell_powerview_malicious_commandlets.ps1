# Get-WinEvent -LogName Microsoft-Windows-PowerShell/Operational | where {($_.ID -eq "4104" -and ($_.message -match "Export-PowerViewCSV" -or $_.message -match "Get-IPAddress" -or $_.message -match "Resolve-IPAddress" -or $_.message -match "Convert-NameToSid" -or $_.message -match "ConvertTo-SID" -or $_.message -match "Convert-ADName" -or $_.message -match "ConvertFrom-UACValue" -or $_.message -match "Add-RemoteConnection" -or $_.message -match "Remove-RemoteConnection" -or $_.message -match "Invoke-UserImpersonation" -or $_.message -match "Invoke-RevertToSelf" -or $_.message -match "Request-SPNTicket" -or $_.message -match "Get-DomainSPNTicket" -or $_.message -match "Invoke-Kerberoast" -or $_.message -match "Get-PathAcl" -or $_.message -match "Get-DNSZone" -or $_.message -match "Get-DomainDNSZone" -or $_.message -match "Get-DNSRecord" -or $_.message -match "Get-DomainDNSRecord" -or $_.message -match "Get-NetDomain" -or $_.message -match "Get-Domain" -or $_.message -match "Get-NetDomainController" -or $_.message -match "Get-DomainController" -or $_.message -match "Get-NetForest" -or $_.message -match "Get-Forest" -or $_.message -match "Get-NetForestDomain" -or $_.message -match "Get-ForestDomain" -or $_.message -match "Get-NetForestCatalog" -or $_.message -match "Get-ForestGlobalCatalog" -or $_.message -match "Find-DomainObjectPropertyOutlier" -or $_.message -match "Get-NetUser" -or $_.message -match "Get-DomainUser" -or $_.message -match "New-DomainUser" -or $_.message -match "Set-DomainUserPassword" -or $_.message -match "Get-UserEvent" -or $_.message -match "Get-DomainUserEvent" -or $_.message -match "Get-NetComputer" -or $_.message -match "Get-DomainComputer" -or $_.message -match "Get-ADObject" -or $_.message -match "Get-DomainObject" -or $_.message -match "Set-ADObject" -or $_.message -match "Set-DomainObject" -or $_.message -match "Get-ObjectAcl" -or $_.message -match "Get-DomainObjectAcl" -or $_.message -match "Add-ObjectAcl" -or $_.message -match "Add-DomainObjectAcl" -or $_.message -match "Invoke-ACLScanner" -or $_.message -match "Find-InterestingDomainAcl" -or $_.message -match "Get-NetOU" -or $_.message -match "Get-DomainOU" -or $_.message -match "Get-NetSite" -or $_.message -match "Get-DomainSite" -or $_.message -match "Get-NetSubnet" -or $_.message -match "Get-DomainSubnet" -or $_.message -match "Get-DomainSID" -or $_.message -match "Get-NetGroup" -or $_.message -match "Get-DomainGroup" -or $_.message -match "New-DomainGroup" -or $_.message -match "Find-ManagedSecurityGroups" -or $_.message -match "Get-DomainManagedSecurityGroup" -or $_.message -match "Get-NetGroupMember" -or $_.message -match "Get-DomainGroupMember" -or $_.message -match "Add-DomainGroupMember" -or $_.message -match "Get-NetFileServer" -or $_.message -match "Get-DomainFileServer" -or $_.message -match "Get-DFSshare" -or $_.message -match "Get-DomainDFSShare" -or $_.message -match "Get-NetGPO" -or $_.message -match "Get-DomainGPO" -or $_.message -match "Get-NetGPOGroup" -or $_.message -match "Get-DomainGPOLocalGroup" -or $_.message -match "Find-GPOLocation" -or $_.message -match "Get-DomainGPOUserLocalGroupMapping" -or $_.message -match "Find-GPOComputerAdmin" -or $_.message -match "Get-DomainGPOComputerLocalGroupMapping" -or $_.message -match "Get-DomainPolicy" -or $_.message -match "Get-NetLocalGroup" -or $_.message -match "Get-NetLocalGroupMember" -or $_.message -match "Get-NetShare" -or $_.message -match "Get-NetLoggedon" -or $_.message -match "Get-NetSession" -or $_.message -match "Get-LoggedOnLocal" -or $_.message -match "Get-RegLoggedOn" -or $_.message -match "Get-NetRDPSession" -or $_.message -match "Invoke-CheckLocalAdminAccess" -or $_.message -match "Test-AdminAccess" -or $_.message -match "Get-SiteName" -or $_.message -match "Get-NetComputerSiteName" -or $_.message -match "Get-Proxy" -or $_.message -match "Get-WMIRegProxy" -or $_.message -match "Get-LastLoggedOn" -or $_.message -match "Get-WMIRegLastLoggedOn" -or $_.message -match "Get-CachedRDPConnection" -or $_.message -match "Get-WMIRegCachedRDPConnection" -or $_.message -match "Get-RegistryMountedDrive" -or $_.message -match "Get-WMIRegMountedDrive" -or $_.message -match "Get-NetProcess" -or $_.message -match "Get-WMIProcess" -or $_.message -match "Find-InterestingFile" -or $_.message -match "Invoke-UserHunter" -or $_.message -match "Find-DomainUserLocation" -or $_.message -match "Invoke-ProcessHunter" -or $_.message -match "Find-DomainProcess" -or $_.message -match "Invoke-EventHunter" -or $_.message -match "Find-DomainUserEvent" -or $_.message -match "Invoke-ShareFinder" -or $_.message -match "Find-DomainShare" -or $_.message -match "Invoke-FileFinder" -or $_.message -match "Find-InterestingDomainShareFile" -or $_.message -match "Find-LocalAdminAccess" -or $_.message -match "Invoke-EnumerateLocalAdmin" -or $_.message -match "Find-DomainLocalGroupMember" -or $_.message -match "Get-NetDomainTrust" -or $_.message -match "Get-DomainTrust" -or $_.message -match "Get-NetForestTrust" -or $_.message -match "Get-ForestTrust" -or $_.message -match "Find-ForeignUser" -or $_.message -match "Get-DomainForeignUser" -or $_.message -match "Find-ForeignGroup" -or $_.message -match "Get-DomainForeignGroupMember" -or $_.message -match "Invoke-MapDomainTrust" -or $_.message -match "Get-DomainTrustMapping")) } | select TimeCreated,Id,RecordId,ProcessId,MachineName,Message

function Add-Rule {

    $ruleName = "powershell_powerview_malicious_commandlets";
    $detectRule = {
        
        function Search-DetectableEvents {
            param (
                $event
            )
            
            $ruleName = "powershell_powerview_malicious_commandlets";
            $detectedMessage = "Detects Commandlet names from PowerView of PowerSploit exploitation framework.";
            $result = $event |  where { ($_.ID -eq "4104" -and ($_.message -match "Export-PowerViewCSV" -or $_.message -match "Get-IPAddress" -or $_.message -match "Resolve-IPAddress" -or $_.message -match "Convert-NameToSid" -or $_.message -match "ConvertTo-SID" -or $_.message -match "Convert-ADName" -or $_.message -match "ConvertFrom-UACValue" -or $_.message -match "Add-RemoteConnection" -or $_.message -match "Remove-RemoteConnection" -or $_.message -match "Invoke-UserImpersonation" -or $_.message -match "Invoke-RevertToSelf" -or $_.message -match "Request-SPNTicket" -or $_.message -match "Get-DomainSPNTicket" -or $_.message -match "Invoke-Kerberoast" -or $_.message -match "Get-PathAcl" -or $_.message -match "Get-DNSZone" -or $_.message -match "Get-DomainDNSZone" -or $_.message -match "Get-DNSRecord" -or $_.message -match "Get-DomainDNSRecord" -or $_.message -match "Get-NetDomain" -or $_.message -match "Get-Domain" -or $_.message -match "Get-NetDomainController" -or $_.message -match "Get-DomainController" -or $_.message -match "Get-NetForest" -or $_.message -match "Get-Forest" -or $_.message -match "Get-NetForestDomain" -or $_.message -match "Get-ForestDomain" -or $_.message -match "Get-NetForestCatalog" -or $_.message -match "Get-ForestGlobalCatalog" -or $_.message -match "Find-DomainObjectPropertyOutlier" -or $_.message -match "Get-NetUser" -or $_.message -match "Get-DomainUser" -or $_.message -match "New-DomainUser" -or $_.message -match "Set-DomainUserPassword" -or $_.message -match "Get-UserEvent" -or $_.message -match "Get-DomainUserEvent" -or $_.message -match "Get-NetComputer" -or $_.message -match "Get-DomainComputer" -or $_.message -match "Get-ADObject" -or $_.message -match "Get-DomainObject" -or $_.message -match "Set-ADObject" -or $_.message -match "Set-DomainObject" -or $_.message -match "Get-ObjectAcl" -or $_.message -match "Get-DomainObjectAcl" -or $_.message -match "Add-ObjectAcl" -or $_.message -match "Add-DomainObjectAcl" -or $_.message -match "Invoke-ACLScanner" -or $_.message -match "Find-InterestingDomainAcl" -or $_.message -match "Get-NetOU" -or $_.message -match "Get-DomainOU" -or $_.message -match "Get-NetSite" -or $_.message -match "Get-DomainSite" -or $_.message -match "Get-NetSubnet" -or $_.message -match "Get-DomainSubnet" -or $_.message -match "Get-DomainSID" -or $_.message -match "Get-NetGroup" -or $_.message -match "Get-DomainGroup" -or $_.message -match "New-DomainGroup" -or $_.message -match "Find-ManagedSecurityGroups" -or $_.message -match "Get-DomainManagedSecurityGroup" -or $_.message -match "Get-NetGroupMember" -or $_.message -match "Get-DomainGroupMember" -or $_.message -match "Add-DomainGroupMember" -or $_.message -match "Get-NetFileServer" -or $_.message -match "Get-DomainFileServer" -or $_.message -match "Get-DFSshare" -or $_.message -match "Get-DomainDFSShare" -or $_.message -match "Get-NetGPO" -or $_.message -match "Get-DomainGPO" -or $_.message -match "Get-NetGPOGroup" -or $_.message -match "Get-DomainGPOLocalGroup" -or $_.message -match "Find-GPOLocation" -or $_.message -match "Get-DomainGPOUserLocalGroupMapping" -or $_.message -match "Find-GPOComputerAdmin" -or $_.message -match "Get-DomainGPOComputerLocalGroupMapping" -or $_.message -match "Get-DomainPolicy" -or $_.message -match "Get-NetLocalGroup" -or $_.message -match "Get-NetLocalGroupMember" -or $_.message -match "Get-NetShare" -or $_.message -match "Get-NetLoggedon" -or $_.message -match "Get-NetSession" -or $_.message -match "Get-LoggedOnLocal" -or $_.message -match "Get-RegLoggedOn" -or $_.message -match "Get-NetRDPSession" -or $_.message -match "Invoke-CheckLocalAdminAccess" -or $_.message -match "Test-AdminAccess" -or $_.message -match "Get-SiteName" -or $_.message -match "Get-NetComputerSiteName" -or $_.message -match "Get-Proxy" -or $_.message -match "Get-WMIRegProxy" -or $_.message -match "Get-LastLoggedOn" -or $_.message -match "Get-WMIRegLastLoggedOn" -or $_.message -match "Get-CachedRDPConnection" -or $_.message -match "Get-WMIRegCachedRDPConnection" -or $_.message -match "Get-RegistryMountedDrive" -or $_.message -match "Get-WMIRegMountedDrive" -or $_.message -match "Get-NetProcess" -or $_.message -match "Get-WMIProcess" -or $_.message -match "Find-InterestingFile" -or $_.message -match "Invoke-UserHunter" -or $_.message -match "Find-DomainUserLocation" -or $_.message -match "Invoke-ProcessHunter" -or $_.message -match "Find-DomainProcess" -or $_.message -match "Invoke-EventHunter" -or $_.message -match "Find-DomainUserEvent" -or $_.message -match "Invoke-ShareFinder" -or $_.message -match "Find-DomainShare" -or $_.message -match "Invoke-FileFinder" -or $_.message -match "Find-InterestingDomainShareFile" -or $_.message -match "Find-LocalAdminAccess" -or $_.message -match "Invoke-EnumerateLocalAdmin" -or $_.message -match "Find-DomainLocalGroupMember" -or $_.message -match "Get-NetDomainTrust" -or $_.message -match "Get-DomainTrust" -or $_.message -match "Get-NetForestTrust" -or $_.message -match "Get-ForestTrust" -or $_.message -match "Find-ForeignUser" -or $_.message -match "Get-DomainForeignUser" -or $_.message -match "Find-ForeignGroup" -or $_.message -match "Get-DomainForeignGroupMember" -or $_.message -match "Invoke-MapDomainTrust" -or $_.message -match "Get-DomainTrustMapping")) } | select TimeCreated, Id, RecordId, ProcessId, MachineName, Message;
            if ($result -and $result.Count -ne 0) {
                Write-Output ""; 
                Write-Output "Detected! RuleName:$ruleName";
                Write-Output $detectedMessage;
                Write-Output $result;
                Write-Output ""; 
            }
        };
        . Search-DetectableEvents $args;
    };
    if(! $ruleStack[$ruleName]) {
        $ruleStack.Add($ruleName, $detectRule);
    } else {
       Write-Host "Rule Import Error"  -Foreground Yellow;
    }
}
